#!/bin/python3
#   https://pypi.org/project/music/
#   For the lib : pip install music
#   By : Florent Loock & Maxime Deroulou
#
#
import music as M
import numpy as n
import sys as s
import random as r

# Init
T = M.tables.Basic()
H = M.utils.H

def main(av):
    #Création du son
    b = M.core.Being()

    #Tempo
    b.d_ = [0.5, 0.5, 0.5, 0.5]
    b.fv_ = [0, 0, 0, 0]    # vibrato frequency //"sinusoid"
    b.nu_ = [0, 0, 0, 0]   # vibrato depth in semitones (maximum deviation of pitch)
    b.f_ = [110, 0, 659.255, 0]
    stempo = b.render(30)

    #Tempo
    b.d_ = [0.5, 0.6]
    b.fv_ = [0]    # vibrato frequency //"sinusoid"
    b.nu_ = [1]   # vibrato depth in semitones (maximum deviation of pitch)
    b.f_ = [150, 150, 0]
    test = b.render(20)

    b.d_ = [0.2] # temps
    b.fv_ = [1]    # vibrato frequency //"sinusoid"
    b.nu_ = [1]   # vibrato depth in semitones (maximum deviation of pitch)
    b.f_ = [500, 500, 500, 350, 150, 500, 350, 150, 650, 500, 500, 500, 350, 150, 500, 350, 150, 650, 500, 300, 150, 400, 200, 200, 125, 125, 250, 250, 400, 200, 200, 125, 125, 250, 125, 500, 375, 125, 500, 375, 125, 650, 500, 300, 150, 400, 200, 200, 125, 125, 250, 250, 400, 200, 200, 125, 125, 250, 250, 500, 375, 125, 500, 375, 125, 650]
    stempo2 = b.render(len(b.f_))

    # 2) set its parameters using sequences to be iterated through
    b.d_ = [4, 1/4, 1/4] # durations in seconds
    b.fv_ = [0] # vibrato frequency //"sinusoid"
    b.nu_ = [10] # vibrato depth in semitones (maximum deviation of pitch)
    b.f_ = [220, 330] # frequencies for the notes //
    s1 = b.render(20) # boucle sur l'array f_

    # Création du son
    flo = H(stempo)
    # Enregistrement en .wav
    max = H(stempo2)
    M.core.WS(flo, 'my_music.wav')

av = s.argv
main(av)

# s1
# s2
# s1 et s2
# s1 et s2 en même temps mais sur des cannaux LR dif.
# s1 et s2 reversed
# then s1 et s2 en skipant 6 note:
#s3 = H(s1, s2, s1 + s2, (s1, s2), s1*s2[::-1], s1[::7] + s2[::7])
